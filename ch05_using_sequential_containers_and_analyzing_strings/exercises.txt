5-0
    Run make and ./frame in /char_pics to compile and run.
    Run make and ./grade in /fail_pass to compile and run.
    Run make and ./split in /split to compile and run.

5-1
    Run make and ./kwic in /permuted_index to compile and run.

5-2
    Run make and ./war in /list_vs_vec to compile and run.

5-3
    Run make and ./td in /typedef to compile and run.

5-4
    The earlier exercise allows either vector or list implementation by only
    changing the typedef declaration.

5-5
    Run make and ./center in /center to compile and run.
    Doing this would help functions where symmetry (palindrome) needs to be
    emphasized. See if there is a clean mirrorring of text across the half-way 
    mark.

5-6
    The performance of having to insert new copies to the beginning of a vector
    (which is worst-case since everything else is shifted down) and copying
    wasting more space (multiple copies of passing students) followed by a
    resizing that requires memory deallocation is understandably slower than the
    more simple erasing of failing student records as they are found.
    Run make and ./war in /resize to test.

5-7
    Attempting to frame an empty vector results in an output of
    ****
    ****
    because the string is empty and the corners and the padding still get
    printed. width is always offset by the amount of padding and the 2 *'s for
    either side.

5-8
    Putting s outside the scope of the while in hcat causes s to be set to
    the left side, padded, and then catenated with the right side. On the next
    iteration, s is not destroyed but preserved. Therefore, at some point s may
    exceed the maximum width when determining how much to pad and an invalid
    argument, like a negative size, may be attempted to be passed to the string
    generator of how much spaces ot pad.

5-9
    Run ./case in /case to compile and run.

5-10
    Run ./palindrome in /palindrome to compile and run.

5-11
    Run ./scend in /ascending_descending to compile and run.
